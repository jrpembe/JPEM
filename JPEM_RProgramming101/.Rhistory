PimaIndiansDiabetes %>%
select(pregnant, glucose, pressure, triceps, insulin, mass, pedigree, age, diabetes) %>%
mutate(diabetes = ifelse(diabetes == "pos", "Positive", "Negative")) %>%
head(10) %>%  # showing just a sample for clarity
gt() %>%
tab_header(title = "PimaIndiansDiabetes Dataset") %>%
tab_style(
style = list(cell_fill(color = "lightgreen")),
locations = cells_body(
columns = diabetes,
rows = diabetes == "Positive"
)
) %>%
tab_style(
style = list(cell_fill(color = "mistyrose")),
locations = cells_body(
columns = diabetes,
rows = diabetes == "Negative"
)
)
#| echo: true
#| message: false
#| warning: false
#| label: fig-scatter-plot
#| fig-cap: "Glucose Levels and Diabetes Status"
PimaIndiansDiabetes %>%
ggplot(aes(x = glucose, y = as.numeric(diabetes == "pos") * 0.5, color = diabetes)) +
geom_jitter(height = 0.2, width = 0.2, alpha = 0.3, size = 4) +
scale_color_manual(values = c("neg" = "darkgreen", "pos" = "red")) +
labs(
title = "Glucose Levels and Diabetes Status",
x = "Glucose Levels"
) +
scale_y_continuous(
breaks = c(0, 0.5),
labels = c("No Diabetes", "Diabetes")
) +
theme_minimal() +
theme(
legend.position = "none",
axis.line.x = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
axis.title.y = element_blank()
)
#| echo: true
#| message: false
#| warning: false
#| label: fig-logistic-regression
#| fig-cap: "Predicted Probability of Diabetes by Glucose Levels"
model <- glm(diabetes ~ glucose, data = PimaIndiansDiabetes, family = "binomial")
# Generate data for the curve
glucose_range <- data.frame(glucose = seq(min(PimaIndiansDiabetes$glucose),
max(PimaIndiansDiabetes$glucose),
length.out = 500))
glucose_range$prob <- predict(model, newdata = glucose_range, type = "response")
# Plot the predicted probability
plot_ly(data = glucose_range,
x = ~glucose,
y = ~prob,
type = 'scatter',
mode = 'lines',
name = "Probability Curve") %>%
layout(
title = "Probability of Diabetes by Glucose Level",
xaxis = list(title = "Glucose Level"),
yaxis = list(title = "Probability of Diabetes")
)
#| message: false
#| warning: false
model2 <- glm(diabetes ~ glucose,
data = PimaIndiansDiabetes,
family = binomial)
summary(model2)
#| message: false
#| warning: false
#| label: fig-age-proportion
#| fig-cap: "Diabetes Proportion by Age Group"
# Prepare the data
age_data <- PimaIndiansDiabetes %>%
mutate(age_group = case_when(
age < 30 ~ "Young adult",
age <= 50 ~ "Middle aged",
TRUE ~ "Older adult"
)) %>%
mutate(age_group = factor(age_group, levels = c("Young adult", "Middle aged", "Older adult")))
count(age_group, diabetes) %>%
group_by(age_group) %>%
mutate(proportion = n / sum(n) * 100)
# Plot the chart
ggplot(age_data, aes(x = age_group, y = proportion, fill = diabetes)) +
geom_col(position = "stack", width = 0.7) +
scale_fill_manual(
values = c("neg" = "lightgreen", "pos" = "lightcoral"),
labels = c("neg" = "No diabetes", "pos" = "Diabetes")
) +
labs(
x = "Age Group",
y = "Proportion (%)",
fill = "Diabetes Status",
title = "Diabetes Proportions by Age Group"
) +
theme_minimal()
#| message: false
#| warning: false
#| label: fig-age-proportion
#| fig-cap: "Diabetes Proportion by Age Group"
# Prepare the data
age_data <- PimaIndiansDiabetes %>%
mutate(age_group = case_when(
age < 30 ~ "Young adult",
age <= 50 ~ "Middle aged",
TRUE ~ "Older adult"
)) %>%
mutate(age_group = factor(age_group, levels = c("Young adult", "Middle aged", "Older adult"))) %>%
count(age_group, diabetes) %>%
group_by(age_group) %>%
mutate(proportion = n / sum(n) * 100)
# Plot the chart
ggplot(age_data, aes(x = age_group, y = proportion, fill = diabetes)) +
geom_col(position = "stack", width = 0.7) +
scale_fill_manual(
values = c("neg" = "lightgreen", "pos" = "lightcoral"),
labels = c("neg" = "No diabetes", "pos" = "Diabetes")
) +
labs(
x = "Age Group",
y = "Proportion (%)",
fill = "Diabetes Status",
title = "Diabetes Proportions by Age Group"
) +
theme_minimal()
model4 <- glm(diabetes ~ glucose + age,
data = PimaIndiansDiabetes,
family = binomial)
summary(model4)
#| label: Load Libraries
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(plotly)
library(gtExtras)
library(mlbench)
data("PimaIndiansDiabetes") #<1>
# Prepare and display the table
PimaIndiansDiabetes %>%
select(pregnant, glucose, pressure, triceps, insulin, mass, pedigree, age, diabetes) %>%
mutate(diabetes = ifelse(diabetes == "pos", "Positive", "Negative")) %>%
head(10) %>%  # showing just a sample for clarity
gt() %>%
tab_header(title = "PimaIndiansDiabetes Dataset") %>%
tab_style(
style = list(cell_fill(color = "lightgreen")),
locations = cells_body(
columns = diabetes,
rows = diabetes == "Positive"
)
) %>%
tab_style(
style = list(cell_fill(color = "mistyrose")),
locations = cells_body( #<2>
columns = diabetes,
rows = diabetes == "Negative"
)
)
#| echo: true
#| message: false
#| warning: false
#| label: fig-scatter-plot
#| fig-cap: "Glucose Levels and Diabetes Status"
PimaIndiansDiabetes %>%
ggplot(aes(x = glucose, y = as.numeric(diabetes == "pos") * 0.5, color = diabetes)) +
geom_jitter(height = 0.2, width = 0.2, alpha = 0.3, size = 4) +
scale_color_manual(values = c("neg" = "darkgreen", "pos" = "red")) +
labs(
title = "Glucose Levels and Diabetes Status",
x = "Glucose Levels"
) +
scale_y_continuous(
breaks = c(0, 0.5),
labels = c("No Diabetes", "Diabetes")
) +
theme_minimal() +
theme(
legend.position = "none",
axis.line.x = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5),
axis.title.y = element_blank()
)
#| echo: true
#| message: false
#| warning: false
#| label: fig-logistic-regression
#| fig-cap: "Predicted Probability of Diabetes by Glucose Levels"
model <- glm(diabetes ~ glucose, data = PimaIndiansDiabetes, family = "binomial")
# Generate data for the curve
glucose_range <- data.frame(glucose = seq(min(PimaIndiansDiabetes$glucose),
max(PimaIndiansDiabetes$glucose),
length.out = 500))
glucose_range$prob <- predict(model, newdata = glucose_range, type = "response")
# Plot the predicted probability
plot_ly(data = glucose_range,
x = ~glucose,
y = ~prob,
type = 'scatter',
mode = 'lines',
name = "Probability Curve") %>%
layout(
title = "Probability of Diabetes by Glucose Level",
xaxis = list(title = "Glucose Level"),
yaxis = list(title = "Probability of Diabetes")
)
#| message: false
#| warning: false
model2 <- glm(diabetes ~ glucose,
data = PimaIndiansDiabetes,
family = binomial)
summary(model2)
#| message: false
#| warning: false
#| label: fig-age-proportion
#| fig-cap: "Diabetes Proportion by Age Group"
# Prepare the data
age_data <- PimaIndiansDiabetes %>%
mutate(age_group = case_when(
age < 30 ~ "Young adult",
age <= 50 ~ "Middle aged",
TRUE ~ "Older adult"
)) %>%
mutate(age_group = factor(age_group, levels = c("Young adult", "Middle aged", "Older adult"))) %>%
count(age_group, diabetes) %>%
group_by(age_group) %>%
mutate(proportion = n / sum(n) * 100)
# Plot the chart
ggplot(age_data, aes(x = age_group, y = proportion, fill = diabetes)) +
geom_col(position = "stack", width = 0.7) +
scale_fill_manual(
values = c("neg" = "lightgreen", "pos" = "lightcoral"),
labels = c("neg" = "No diabetes", "pos" = "Diabetes")
) +
labs(
x = "Age Group",
y = "Proportion (%)",
fill = "Diabetes Status",
title = "Diabetes Proportions by Age Group"
) +
theme_minimal()
age_data2 <- PimaIndiansDiabetes %>%
mutate(age_group = case_when(
age < 30 ~ "Young adult",
age <= 50 ~ "Middle aged",
TRUE ~ "Older adult"
)) %>%
mutate(age_group = factor(age_group, levels = c("Young adult", "Middle aged", "Older adult")))
model3 <- glm(diabetes ~ age_group,
data = age_data2,
family = binomial)
summary(model3)
model4 <- glm(diabetes ~ glucose + age,
data = PimaIndiansDiabetes,
family = binomial)
summary(model4)
#| echo: true
#| message: false
#| warning: false
#| message: false
#| warning: false
PimaIndiansDiabetes %>%
ggplot(age, glucose) +
geom_point() +
geom_smooth(method = lm, se = f)
PimaIndiansDiabetes %>%
ggplot(age, glucose) +
geom_point() +
geom_smooth(method = lm, se = f)
View(PimaIndiansDiabetes)
#| label: Load Libraries
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(plotly)
library(gtExtras)
library(mlbench)
PimaIndiansDiabetes %>%
ggplot(age, glucose) +
geom_point() +
geom_smooth(method = lm, se = f)
ggplot(aes(age, glucose) +
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_point() +
geom_smooth(method = lm, se = f)
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_point()
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_line()
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_point()
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_smooth()
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_smooth(method = lm)
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_smooth(method = lm, se = F)
#| message: false
#| warning: false
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_smooth(method = lm, se = F)
#| message: false
#| warning: false
#| label: fig-smooth-plot
#| fig-cap: "Glucose Levels vs Age"
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_smooth(method = lm, se = F) +
labs(
title = "Glucose Levels vs Age"
)
#| message: false
#| warning: false
#| label: fig-smooth-plot
#| fig-cap: "Glucose Levels vs Age"
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_smooth(method = lm, se = F) +
labs(
title = "Glucose Levels vs Age"
) +
theme_minimal()
#| message: false
#| warning: false
#| label: fig-smooth-plot
#| fig-cap: "Glucose Levels vs Age"
PimaIndiansDiabetes %>%
ggplot(aes(age, glucose)) +
geom_smooth(method = lm, se = F) +
labs(
title = "Glucose Levels vs Age",
x = "Age",
y = "Glucose Level"
) +
theme_minimal()
library(readr)
titanic <- read_csv("C:/Users/jason/OneDrive/SAIT/SAIT Instructor/2025-2026/SPRING 2025 - COURSE - DATA420/data/titanic.csv")
View(titanic)
setwd("C:/JPEM_Git_Main/JPEM/JPEM_RProgramming101")
library(tidyverse)
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%  # remove the variable reference and observe how many values are left out
ggplot(aes(fct_infreq(vore))) +
geom_bar(fill = "#57B35B") +
# coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%  # remove the variable reference and observe how many values are left out
#ggplot(aes(fct_infreq(vore))) +
ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
# coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%  # remove the variable reference and observe how many values are left out
ggplot(aes(fct_infreq(vore))) +
#ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
# coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%  # remove the variable reference and observe how many values are left out
ggplot(aes(fct_infreq(vore))) +
#ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%  # remove the variable reference and observe how many values are left out
ggplot(aes(fct_infreq(vore))) +
#ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
#coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%  # remove the variable reference and observe how many values are left out
#ggplot(aes(fct_infreq(vore))) +
ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
#coord_flip() +
the_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%  # remove the variable reference and observe how many values are left out
#ggplot(aes(fct_infreq(vore))) +
ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
#coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
# remove the variable reference and observe how many values are left out
ggplot(aes(fct_infreq(vore))) +
ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
#coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
#drop_na(vore) %>%  # remove the variable reference and observe how many values are left out
ggplot(aes(fct_infreq(vore))) +
ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
#coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%  # remove the variable reference and observe how many values are left out
ggplot((fct_infreq(vore))) +
ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
#coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
msleep %>%
drop_na(vore)   # remove the variable reference and observe how many values are left out
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%    # remove the variable reference and observe how many values are left out
ggplot((fct_infreq(vore))) +
ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
#coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
# Single Categorical Variable
msleep %>%
drop_na(vore) %>%    # remove the variable reference and observe how many values are left out
ggplot(aes(fct_infreq(vore))) +
ggplot(aes(vore)) +
geom_bar(fill = "#57B35B") +
#coord_flip() +
theme_bw() +
labs(
x = "Type of -Vore",
y = NULL,
title = "Number of Observations Per Order"
)
