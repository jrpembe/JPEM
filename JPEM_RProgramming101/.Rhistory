y = "Religion"
)
# to create the same result using mutate:
# gss_cat %>%
#   drop_na(tvhours) %>%
#   group_by(relig) %>%
#   mutate(mean_tv = mean(tvhours)) %>%
#   distinct(relig, mean_tv) %>%
#   ggplot(aes(mean_tv, relig)) +
#   geom_point(size = 4)
gss_cat %>%
drop_na(tvhours) %>%
group_by(relig) %>%
summarise(mean_tv = mean(tvhours)) %>%
mutate(relig = fct_reorder(relig, mean_tv)) %>%
ggplot(aes(mean_tv, relig)) +
geom_point(size = 4) +
labs(
title = "Average TV Viewing Hours by Religion",
x = "Avg. Viewing Hours",
y = "Religion"
)
gss_cat %>%
drop_na(age) %>%
filter(rincome != "Not applicable") %>%
group_by(rincome) %>%
summarise(mean_age = mean(age)) %>%
ggplot(aes(mean_age, rincome)) +
geom_point(size = 4) +
labs(
title = "Income by Avg. Age",
x = "Average Age",
y = "Income Level"
)
gss_cat %>%
drop_na(age) %>%
filter(rincome != "Not applicable") %>%
group_by(rincome) %>%
summarise(mean_age = mean(age)) %>%
mutate(rincome = fct_rev(rincome)) %>%
ggplot(aes(mean_age, rincome)) +
geom_point(size = 4) +
labs(
title = "Income by Avg. Age",
x = "Average Age",
y = "Income Level"
)
# Original Plot
gss_cat %>%
ggplot(aes(marital)) +
geom_bar()
# frequency count
gss_cat %>%
mutate(marital = fct_infreq(marital)) %>% # frequency count
count(marital)
# reverse frequency count
gss_cat %>%
mutate(marital = fct_infreq(marital)) %>% # frequency count
mutate(marital = fct_rev(marital)) %>% # reverse frequency count
count(marital)
# Visualize
gss_cat %>%
mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
ggplot(aes(marital)) +
geom_bar(fill = "steelblue", alpha = 0.5) +
theme_bw()
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind, near rep",
"Independent, near dem" = "Ind, near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat",
"Other" = "No answer",
"Other" = "Don't know",
"Other" = "Other party"
)) %>%
count(partyid)
# Alternative method - Factor Collapse
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer", "Don't know", "Other party"),
rep = c("Strong republican", "Not str republican"),
ind = c("Ind, near rep", "Ind, near dem"),
dem = c("Not str democrat", "Strong democrat"))) %>%
count(partyid)
# lumping into other
gss_cat %>%
count(relig, sort = T)
gss_cat %>%
mutate(relig = fct_lump(relig, n=2)) %>%
count(relig)
library(tidyverse)
library(forcats)
library(patchwork)
View(gss_cat)
glimpse(gss_cat)
# The order of categorical variables matters
unique(gss_cat$race)
# or
gss_cat %>%
pull(race) %>% # pull the race variable out as a vector, as opposed to as a data.frame
unique() # requires a vector
# count
count(gss_cat, race, sort = T) # 1st argument is data.frame, second is the variable, sorted biggest to smallest
gss_cat %>%
select(race) %>%
table()
gss_cat %>%
mutate(race = fct_drop(race)) %>%
pull(race) %>%
levels()
# We'd like to order religion BY average TV watching time
gss_cat %>%
drop_na(tvhours) %>%
group_by(relig) %>%
summarise(mean_tv = mean(tvhours)) %>%
ggplot(aes(mean_tv, relig)) +
geom_point(size = 4) +
labs(
title = "Average TV Viewing Hours by Religion",
x = "Avg. Viewing Hours",
y = "Religion"
)
# to create the same result using mutate:
# gss_cat %>%
#   drop_na(tvhours) %>%
#   group_by(relig) %>%
#   mutate(mean_tv = mean(tvhours)) %>%
#   distinct(relig, mean_tv) %>%
#   ggplot(aes(mean_tv, relig)) +
#   geom_point(size = 4)
gss_cat %>%
drop_na(tvhours) %>%
group_by(relig) %>%
summarise(mean_tv = mean(tvhours)) %>%
mutate(relig = fct_reorder(relig, mean_tv)) %>%
ggplot(aes(mean_tv, relig)) +
geom_point(size = 4) +
labs(
title = "Average TV Viewing Hours by Religion",
x = "Avg. Viewing Hours",
y = "Religion"
)
gss_cat %>%
drop_na(age) %>%
filter(rincome != "Not applicable") %>%
group_by(rincome) %>%
summarise(mean_age = mean(age)) %>%
ggplot(aes(mean_age, rincome)) +
geom_point(size = 4) +
labs(
title = "Income by Avg. Age",
x = "Average Age",
y = "Income Level"
)
gss_cat %>%
drop_na(age) %>%
filter(rincome != "Not applicable") %>%
group_by(rincome) %>%
summarise(mean_age = mean(age)) %>%
mutate(rincome = fct_rev(rincome)) %>%
ggplot(aes(mean_age, rincome)) +
geom_point(size = 4) +
labs(
title = "Income by Avg. Age",
x = "Average Age",
y = "Income Level"
)
# Original Plot
gss_cat %>%
ggplot(aes(marital)) +
geom_bar()
# frequency count
gss_cat %>%
mutate(marital = fct_infreq(marital)) %>% # frequency count
count(marital)
# reverse frequency count
gss_cat %>%
mutate(marital = fct_infreq(marital)) %>% # frequency count
mutate(marital = fct_rev(marital)) %>% # reverse frequency count
count(marital)
# Visualize
gss_cat %>%
mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
ggplot(aes(marital)) +
geom_bar(fill = "steelblue", alpha = 0.5) +
theme_bw()
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind, near rep",
"Independent, near dem" = "Ind, near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat",
"Other" = "No answer",
"Other" = "Don't know",
"Other" = "Other party"
)) %>%
count(partyid)
# Alternative method - Factor Collapse
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer", "Don't know", "Other party"),
rep = c("Strong republican", "Not str republican"),
ind = c("Ind, near rep", "Ind, near dem"),
dem = c("Not str democrat", "Strong democrat"))) %>%
count(partyid)
# lumping into other
gss_cat %>%
count(relig, sort = T)
gss_cat %>%
mutate(relig = fct_lump(relig, n=2)) %>% # lumps results into top to, and all others
count(relig)
gss_cat %>%
filter(!is.na(age)) %>%
filter(marital %in% c(
"Never married",
"Married",
"Widowed")) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(age, prop, colour = marital)) +
geom_line(size = 2, na.rm = TRUE) +
theme_minimal()
gss_cat %>%
filter(!is.na(age)) %>%
filter(marital %in% c(
"Never married",
"Married",
"Widowed")) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(age, prop, colour = marital)) +
geom_line(size = 2, na.rm = TRUE) +
theme_minimal() +
labs(
title = "Proportion of Marriage Status by Age",
x = "Age",
y = "Proportion"
)
)
gss_cat %>%
filter(!is.na(age)) %>%
filter(marital %in% c(
"Never married",
"Married",
"Widowed")) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = (n / sum(n)) * 100) %>%
ggplot(aes(age, prop, colour = marital)) +
geom_line(size = 2, na.rm = TRUE) +
theme_minimal() +
labs(
title = "Proportion of Marriage Status by Age",
x = "Age",
y = "Proportion"
)
gss_cat %>%
filter(!is.na(age)) %>%
filter(marital %in% c(
"Never married",
"Married",
"Widowed")) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = (n / sum(n)) * 100) %>%
ggplot(aes(age, prop, colour = marital)) +
geom_line(size = 2, na.rm = TRUE) +
theme_minimal() +
labs(
title = "Proportion of Marriage Status by Age",
x = "Age",
y = "Percent"
)
gss_cat %>%
filter(!is.na(age)) %>%
filter(marital %in% c(
"Never married",
"Married",
"Widowed")) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = (n / sum(n)) * 100) %>%
mutate(marital = fct_reorder2(marital, age, prop)) %>%
mutate(marital = fct_rev(marital)) %>%
ggplot(aes(age, prop, colour = marital)) +
geom_line(size = 2, na.rm = TRUE) +
theme_minimal() +
labs(
title = "Proportion of Marriage Status by Age",
x = "Age",
y = "Percent"
)
gss_cat %>%
filter(!is.na(age)) %>%
filter(marital %in% c(
"Never married",
"Married",
"Widowed")) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = (n / sum(n)) * 100) %>%
ggplot(aes(age, prop, colour = marital)) +
geom_line(size = 2, na.rm = TRUE) +
theme_minimal() +
labs(
title = "Proportion of Marriage Status by Age",
x = "Age",
y = "Percent"
)
# by default the legend is ordered as a factor. Lets rearrange so the colour of the
# legend is displayed to match the order of the lines at the end of the chart.
gss_cat %>%
filter(!is.na(age)) %>%
filter(marital %in% c(
"Never married",
"Married",
"Widowed")) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = (n / sum(n)) * 100) %>%
mutate(marital = fct_reorder2(marital, age, prop)) %>%
mutate(marital = fct_rev(marital)) %>%
ggplot(aes(age, prop, colour = marital)) +
geom_line(size = 2, na.rm = TRUE) +
theme_minimal() +
labs(
title = "Proportion of Marriage Status by Age",
x = "Age",
y = "Percent"
)
gss_cat %>%
filter(!is.na(age)) %>%
filter(marital %in% c(
"Never married",
"Married",
"Widowed")) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = (n / sum(n)) * 100) %>%
ggplot(aes(age, prop, colour = marital)) +
geom_line(size = 2, na.rm = TRUE) +
theme_minimal() +
labs(
title = "Proportion of Marriage Status by Age",
x = "Age",
y = "Percent"
)
# by default the legend is ordered as a factor. Lets rearrange so the colour of the
# legend is displayed to match the order of the lines at the end of the chart.
gss_cat %>%
filter(!is.na(age)) %>%
filter(marital %in% c(
"Never married",
"Married",
"Widowed")) %>%
count(age, marital) %>%
group_by(age) %>%
mutate(prop = (n / sum(n)) * 100) %>%
mutate(marital = fct_reorder2(marital, age, prop)) %>%
mutate(marital = fct_rev(marital)) %>%
ggplot(aes(age, prop, colour = marital)) +
geom_line(size = 1, na.rm = TRUE) +
theme_minimal() +
labs(
title = "Proportion of Marriage Status by Age",
x = "Age",
y = "Percent"
)
library(tidyverse)
library(patchwork)
library(gapminder)
gapminder %>%
filter(continent == "Africa") %>%
select(lifeExp) %>%
t.test(mu = 50)
# p-value is 0.002038
# we can reject the null hypothesis
# we accept the alternative hypothesis
my_ttest <- gapminder %>%
filter(continent == "Africa") %>%
select(lifeExp) %>%
t.test(mu = 50)
# what is inside you t-test object?
attributes(my_ttest)
my_ttest$p.value
# Filter data for Africa
africa_data <- gapminder %>%
filter(continent == "Africa")
# Calculate mean life expectancy for Africa
mean_lifeExp_africa <- mean(africa_data$lifeExp)
# Create density plot
ggplot(africa_data, aes(x = lifeExp)) +
geom_density(fill = "red", alpha = 0.2) +
geom_vline(xintercept = mean_lifeExp_africa, linetype = "dashed", color = "black", size = 1) +
labs(title = "Density Plot of Life Expectancy in Africa",
x = "Life Expectancy",
y = "Density") +
theme_minimal()
# H0: Africa and Europe mean life expectancy are the same
# H1: Africa and Europe mean life expectancy are different
gapminder %>%
filter(continent %in% c("Africa", "Europe")) %>%
t.test(lifeExp ~ continent, data = .,
alternative = "two.sided") # data = .by using pipe, it wants to place gapminder as the first argument to t.test
# p-value is < 2.2e-16
# we can reject the null hypothesis
# we accept the alternative hypothesis
# Filter data for Africa and Europe
filtered_data <- gapminder %>%
filter(continent %in% c("Africa", "Europe"))
# Calculate mean life expectancy for each continent
mean_lifeExp <- filtered_data %>%
group_by(continent) %>%
summarise(mean_lifeExp = mean(lifeExp))
# Create density plot
ggplot(filtered_data, aes(x = lifeExp, fill = continent)) +
geom_density(alpha = 0.5) +
geom_vline(data = mean_lifeExp, aes(xintercept = mean_lifeExp, color = continent),
linetype = "dashed", linewidth=1) +
labs(title = "Density Plot of Life Expectancy",
x = "Life Expectancy",
y = "Density",
fill = "Continent",
color = "Mean Life Expectancy") +
theme_minimal()
# H0: Ireland has a mean life expectancy the same as Switzerland
# H1: Ireland mean life expectancy is less
gapminder %>%
filter(country %in% c("Ireland", "Switzerland")) %>%
t.test(lifeExp ~ country, data = .,
alternative = "less",
conf.level = 0.95)
# p-value is 0.05835
# we cannot reject the null hypothesis
# we reject the alternative hypothesis
# Filter data for Ireland and Finland
filtered_data <- gapminder %>%
filter(country %in% c("Ireland", "Switzerland"))
# Calculate mean life expectancy for each country
mean_lifeExp <- filtered_data %>%
group_by(country) %>%
summarise(mean_lifeExp = mean(lifeExp))
# Create density plot with x-axis set from 50 to 90
ggplot(filtered_data, aes(x = lifeExp, fill = country)) +
geom_density(alpha = 0.5) +
geom_vline(data = mean_lifeExp, aes(xintercept = mean_lifeExp, color = country),
linetype = "dashed", linewidth = 1) +
scale_x_continuous(limits = c(50, 90)) +  # Manually sets x-axis limits
labs(title = "Density Plot of Life Expectancy in Ireland & Switzerland",
x = "Life Expectancy",
y = "Density",
fill = "Country",
color = "Mean Life Expectancy") +
theme_minimal()
# H0: The mean life expectancy for Africa is the same in 1957 and 2007
# H1: They are different
#gapminder %>%
#  filter(year %in% c(1957, 2007) &
#           continent == "Africa") %>%
#  mutate(year = factor(year, levels = c(2007, 1957))) %>%
#  t.test(lifeExp ~ year, data = .,
#         paired = TRUE)
# this doesn't work
# Filter for African countries in 1957 and 2007
paired_data <- gapminder %>%
filter(continent == "Africa" & year %in% c(1957, 2007)) %>%
group_by(country) %>%
filter(n() == 2) %>%  # Keep only countries with both years
ungroup() %>%
arrange(country, year)  # Ensure correct pairing order
# Perform paired t-test
t.test(gapminder$lifeExp[gapminder$year == 2007], gapminder$lifeExp[gapminder$year == 1957], paired = TRUE, data = paired_data)
# p-value is < 2.2e-16
# we reject the null hypothesis
# we accept the alternative hypothesis
# Filter data for Africa in 1957 and 2007
africa_data <- gapminder %>%
filter(continent == "Africa" & year %in% c(1957, 2007)) %>%
mutate(year = factor(year))  # Convert year to a factor for plotting
# Calculate mean life expectancy for each year
mean_lifeExp <- africa_data %>%
group_by(year) %>%
summarise(mean_lifeExp = mean(lifeExp))
# Create density plot
ggplot(africa_data, aes(x = lifeExp, fill = year)) +
geom_density(alpha = 0.5) +  # Density plot with transparency
geom_vline(data = mean_lifeExp, aes(xintercept = mean_lifeExp, color = year),
linetype = "dashed", linewidth = 1) +  # Add dashed lines for mean values
labs(title = "Density Plot of Life Expectancy in Africa (1957 vs 2007)",
x = "Life Expectancy",
y = "Density",
fill = "Year",
color = "Mean Life Expectancy") +
theme_minimal()
my_data <- starwars %>%
select(sex, height) %>%
filter(sex %in% c("male", "female")) %>%
drop_na(height)
View(my_data)
t.test(height ~ sex, data = my_data)
starwars %>%
select(sex, height) %>%
filter(sex %in% c("male", "female")) %>%
drop_na(height) %>%
t.test(height ~ sex, data = .)
